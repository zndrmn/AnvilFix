import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id "java-library"
    id "fabric-loom" version "0.11.+"
    id "org.cadixdev.licenser" version "0.6.1"
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

def javaVersion = 17

group = "io.github.onyxstudios"
archivesBaseName = "AnvilFix"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${project.minecraft_version}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "OnyxStudios"
        url = "https://maven.onyxstudios.dev"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = "Shedaniel"
        url = "https://maven.shedaniel.me"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    compileOnly 'org.jetbrains:annotations:22.0.0'

    // FIXME not updated yet
    //modImplementation "dev.upcraft:Mesh-API:${project.mesh_version}"
    //modRuntimeOnly "dev.upcraft:Mesh:${project.mesh_version}"
    modImplementation ("me.shedaniel.cloth:cloth-config-fabric:6.2.57") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modImplementation include(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from "LICENSE.md"
}

license {
    header = project.file("code_quality/MIT_HEADER.txt")
    include "**/*.java"
    charset = StandardCharsets.UTF_8.name()

    style {
        java = "BLOCK_COMMENT"
    }
    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    properties {
        year = Year.now()
        projectDisplayName = project.archivesBaseName
    }
}
